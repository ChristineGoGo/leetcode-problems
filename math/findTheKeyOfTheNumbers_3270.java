/*
    You are given three positive integers num1, num2, and num3.

    The key of num1, num2, and num3 is defined as a four-digit number such that:

    Initially, if any number has less than four digits, it is padded with leading
    zeros.
    The ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit
    among the ith digits of num1, num2, and num3.
    Return the key of the three numbers without leading zeros (if any).

    

    Example 1:

    Input: num1 = 1, num2 = 10, num3 = 1000

    Output: 0

    Explanation:

    On padding, num1 becomes "0001", num2 becomes "0010", and num3 remains "1000".

    The 1st digit of the key is min(0, 0, 1).
    The 2nd digit of the key is min(0, 0, 0).
    The 3rd digit of the key is min(0, 1, 0).
    The 4th digit of the key is min(1, 0, 0).
    Hence, the key is "0000", i.e. 0.

    Example 2:

    Input: num1 = 987, num2 = 879, num3 = 798

    Output: 777

    Example 3:

    Input: num1 = 1, num2 = 2, num3 = 3

    Output: 1

    

    Constraints:

    1 <= num1, num2, num3 <= 9999
*/


public class findTheKeyOfTheNumbers_3270 {
    public int[] paddingInteger(int num) {
        int totalDigits = 0;
        int res[] = new int[4];
        int start = 0;
        int end = 3;

        while(num > 0) {
            int current = num % 10;
            res[end] = current;
            num /= 10;
            end--;
            totalDigits++;
        }

        if (totalDigits < 3) {
            while (start < end) {
                res[start] = 0;
                start++;
            }    
        }
        return res;
    }

    public int generateKey(int num1, int num2, int num3) {
        int[] lst1 = paddingInteger(num1);
        int[] lst2 = paddingInteger(num2);
        int[] lst3 = paddingInteger(num3);

        int start = 1000;
        int total = 0;
        int index = 0;
        int current = 0;

        while (start > 0) {
            current = Math.min(lst1[index], lst2[index]);
            current = Math.min(current, lst3[index]);
            total += (start * current);
            start /= 10;
            index++;
        }
        return total;
    }
    
}
